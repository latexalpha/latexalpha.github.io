{"posts":[{"title":"深度学习概念梳理","text":"本文介绍了深度学习中的一些概念，包括人工智能、机器学习、人工神经网络、深度学习、数据挖掘等，以及它们之间的相互关系。 人工智能人工智能 Artificial Intelligence Artificial Intelligence -IBM 人工智能（英语：artificial intelligence，缩写为 AI）亦称智械、机器智能，指由人制造出来的机器所表现出来的智能。通常人工智能是指通过普通计算机程序来呈现人类智能的技术。该词也指出研究这样的智能系统是否能够實現，以及如何實現。同时，通过医学、神经科学、机器人学及统计学等的进步，常态预测则认为人类的很多职业也逐渐被其取代。 人工智能于一般教材中的定义领域是“智能主体（intelligent agent）的研究与设计”，智能主体指一个可以观察周遭环境并作出行动以达致目标的系统。约翰·麦卡锡于 1954 年的定义是“制造智能机器的科学与工程”。安德烈亚斯·卡普兰（Andreas Kaplan）和迈克尔·海恩莱因（Michael Haenlein）将人工智能定义为“系统正确解释外部数据，从这些数据中学习，并利用这些知识通过灵活适应实现特定目标和任务的能力”。 机器学习机器学习 Machine Learning Machine Learning -IBM 机器学习是人工智能的一个分支。人工智能的研究历史有着一条从以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近 29 多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。 机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA 序列测序、语音和手写识别、战略游戏和机器人等领域。 人工神经网络人工神经网络 Artificial Neural Network 人工神经网络（英语：Artificial Neural Network，ANN），简称神经网络（Neural Network，NN）或人工神經网络，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种自适应系统，通俗地讲就是具备学习功能。现代神经网络是一种非线性统计性数据建模工具，神经网络通常是通过一个基于数学统计学类型的学习方法（Learning Method）得以优化，所以也是数学统计学方法的一种实际应用，通过统计学的标准数学方法我们能够得到大量的可以用函数来表达的局部结构空间，另一方面在人工智能学的人工感知领域，我们通过数学统计学的应用可以来做人工感知方面的决定问题（也就是说通过统计学的方法，人工神经网络能够类似人一样具有简单的决定能力和简单的判断能力），这种方法比起正式的逻辑学推理演算更具有优势。 和其他机器学习方法一样，神经网络已经被用于解决各种各样的问题，例如机器视觉和语音识别。这些问题都是很难被传统基于规则的编程所解决的。 深度学习深度学习 Deep Learning Deep Learning -IBM 深度学习（英语：deep learning）是机器学习的分支，是一种以人工神經网络为架构，对资料进行表征学习的算法。 深度学习是机器学习中一种基于对数据进行表征学习的算法。观测值（例如一幅图像）可以使用多种方式来表示，如每个像素强度值的向量，或者更抽象地表示成一系列边、特定形状的区域等。而使用某些特定的表示方法更容易从实例中学习任务（例如，人脸识别或面部表情识别）。深度学习的好处是用非监督式或半监督式的特征学习和分层特征提取高效算法来替代手工获取特征。 表征学习的目标是寻求更好的表示方法并创建更好的模型来从大规模未标记数据中学习这些表示方法。表示方法来自神经科学，并松散地创建在类似神经系统中的信息处理和对通信模式的理解上，如神经编码，试图定义拉动神经元的反应之间的关系以及大脑中的神经元的电活动之间的关系。 至今已有数种深度学习框架，如深度神经网络、卷积神经网络和深度置信网络和循环神经网络已被应用在计算机视觉、语音识别、自然语言处理、音频识别与生物信息学等领域并获取了极好的效果。 另外，“深度学习”已成为时髦术语，或者说是人工神经网络的品牌重塑。 数据挖掘 Data Mining 数据挖掘（英语：data mining）是一个跨学科的计算机科学分支。它是用人工智能、机器学习、统计学和数据库的交叉方法在相对较大型的数据集中发现模式的计算过程。 数据挖掘过程的总体目标是从一个数据集中提取信息，并将其转换成可理解的结构，以进一步使用。除了原始分析步骤，它还涉及到数据库和数据管理方面、数据预处理、模型与推断方面考量、兴趣度度量、复杂度的考虑，以及发现结构、可视化及在线更新等后处理。数据挖掘是“数据库知识发现”（Knowledge-Discovery in Databases, KDD）的分析步骤，本质上属于机器学习的范畴。 相互关系What’s The Difference Between AI, Machine Learning, and Deep Learning?AI means getting a computer to mimic human behavior in some way. Machine learning is a subset of AI, and it consists of the techniques that enable computers to figure things out from the data and deliver AI applications. Deep learning, meanwhile, is a subset of machine learning that enables computers to solve more complex problems. What’s the Difference Between AI, Machine Learning, and Deep Learning? AI vs. Machine Learning vs. Deep Learning vs. Neural Networks: What’s the Difference?Perhaps the easiest way to think about artificial intelligence, machine learning, neural networks, and deep learning is to think of them like Russian nesting dolls. Each is essentially a component of the prior term. AI vs. Machine Learning vs. Deep Learning vs. Neural Networks: A easy way for differentiation | Kaggle Artificial Intelligence That is, machine learning is a subfield of artificial intelligence. Deep learning is a subfield of machine learning, and neural networks make up the backbone of deep learning algorithms. In fact, it is the number of node layers, or depth, of neural networks that distinguishes a single neural network from a deep learning algorithm, which must have more than three. AI vs. Machine Learning vs. Deep Learning vs. Neural Networks: What’s the Difference? Data Mining Vs. Machine Learning: What Is the Difference?What is Data Mining? Data mining is considered the process of extracting useful information from a vast amount of data. It’s used to discover new, accurate, and useful patterns in the data, looking for meaning and relevant information for the organization or individual who needs it. It’s a tool used by humans. What is Machine Learning? On the other hand, machine learning is the process of discovering algorithms that have improved courtesy of experience derived from data. It’s the design, study, and development of algorithms that permit machines to learn without human intervention. It’s a tool to make machines smarter, eliminating the human element (but not eliminating humans themselves; that would be wrong). Difference Between Data mining and Machine learning: Data mining is the subset of business analytics, it is similar to experimental research. The origins of data mining are databases, statistics. Whereas machine learning involves the algorithm that improves automatically through experience based on data. Data Mining Vs. Machine Learning: What Is the Difference? Data Mining vs Machine Learning What’s More?The main difference between regression and a neural network is the impact of change on a single weight. In regression, you can change a weight without affecting the other inputs in a function. However, this isn’t the case with neural networks. Since the output of one layer is passed into the next layer of the network, a single change can have a cascading effect on the other neurons in the network.","link":"/dfe1e736e68f/"},{"title":"基于 Alist 和 RaiDrive 挂载云盘到本地","text":"本文首先介绍了基于 Alist 进行多个云盘管理，然后介绍了基于 RaiDrive 挂载云盘到本地的过程，最后介绍了基于 PowerShell 脚本自动化挂载的操作。 Alist 管理多个云盘Alist文档 Alist 使用指南 第一步：安装本文介绍 Windows 系统下最新版 Alist 使用方法，其他系统请参考 Alist 文档。 Alist 手动安装 1234567# 下载 Alistunzip alist-xxxx.zip # 解压下载的文件，得到可执行文件# 第一次启用时需要设置密码，然后登录.\\alist.exe admin random # 随机生成密码.\\alist.exe admin set NEW_PASSWORD # # 手动设置一个密码 `NEW_PASSWORD`是指你需要设置的密码# 下次直接启用，使用设置的密码登录.\\alist.exe server # 启动 Alist 服务 安装完之后在浏览器登录：http://127.0.0.1:5244/@login. 第二步：添加云盘登录完成后点击底部 Manage/管理 按钮，进入管理界面。 从左侧的 Storages 导航进入添加云盘界面，添加自己的云盘，下面是一些需要注意的设置项： Driver: 选择云盘类型，这里选择 AliyunDriveOpen，即阿里云盘； Mount Path: 设置挂载路径，这里设置为 阿里云盘，即在 Alist 界面中显示的云盘名称； WebDAV policy: 设置 WebDAV 策略，这里选择 native proxy，即使用 Alist 自带的 WebDAV 代理； Refresh Token: 设置阿里云盘的 Refresh Token，这里使用 Alist 提供的工具 获取； Order by: 设置排序方式，这里选择 name，即按照名称排序； Order direction: 设置排序方向，这里选择 asc，即升序排列。 设置完成后启用服务然后登录即可以看到添加的云盘，点击云盘名称即可进入云盘。 Alist 使用指南：添加阿里云盘Open RaiDrive 挂载云盘到本地RaiDrive 官网 RaiDrive 说明文档 点击添加，选择 NAS 选项，然后选择 WebDAV； 进行如下设置：取消选择地址，设置地址和端口为 Alist 服务的地址和端口，这里是 http://127.0.0.1和5244，然后输入 Alist 设置的 admin 密码，点击确定即可。 PowerShell 脚本自动化挂载利用 PowerShell 脚本自动化挂载云盘到本地有两个理由： 由于每次关机之后 Alist 服务会停止，所以需要每次开机后手动启动 Alist 服务； RaiDrive 可以设置自动启动，但是会有广告弹窗，且自启动的方式不是我喜欢的模式。 123456Set-Location -Path &quot;Path to alist.exe&quot; # need to change directory to where the alist.exe is locatedWrite-Host &quot;Current directory is: $pwd&quot;Write-Host &quot;Launch RaiDrive...&quot;Start-Process -FilePath &quot;Path to RaiDrive.exe&quot; # need to change directory to where the RaiDrive.exe is locatedWrite-Host &quot;Launch Alist server...&quot;.\\alist.exe server 将以上代码保存为 alist.ps1，并将其路径添加到 PowerShell $PROFILE 中，即可以在 Terminal 中自动化挂载。","link":"/e24cbdc907f5/"},{"title":"基于 Hexo 和 GitHub 搭建个人博客","text":"本文首先介绍了 Hexo 的安装， 然后介绍了 GitHub Pages 的设置，最后介绍了一些主题自定义的内容。 Hexo 安装Hexo 官网 Hexo 说明文档 前置条件 安装 Node.js 并了解 npm 相关基础知识； 安装 git 并了解其基本使用方法。 安装 Hexo12345npm install hexo-cli -g # 安装 Hexohexo init blog # blog 为博客项目根目录cd blognpm installhexo server # 启动服务 GitHub Pages 设置GitHub Pages | Hexo GitHub SSH 连接配置好 SSH 连接后，就可以使用 SSH 协议来连接 GitHub。 新建 GitHub Repo创建仓库新建一个名为 username.github.io 的仓库，最后博客的访问地址就是 http://username.github.io. 修改 config 文件中的 deploy 方式这里采用 Hexo 说明文档中的 One-command Deployment 方式，即一键部署，需要修改 _config.yml 文件中的 deploy 部分和安装 hexo-deployer-git 插件。 1234deploy: type: git repository: git@github.com: username/username.github.io.git branch: main 1npm install hexo-deployer-git –save 博客撰写与发布 新建文章 12hexo new post &quot;about&quot; # 新建关于页面hexo new &quot;My New Post&quot; # 新建文章 生成静态文件 1hexo generate 发布 1hexo deploy 添加多个标签： 123tags: - tag 1 - tag 2 添加分类： 123categories: - category 1 - category 2 添加目录： 1toc: true # 在文章中添加目录 主题自定义主页三栏、文章页两栏新建一个_config.post.yml文件，内容如下： ~\\blog\\_config.post.yml123456789101112131415161718192021222324252627282930313233widgets: # Archives widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: right type: archives # Categories widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: right type: categories # Tags widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: right type: tags # How to order tags. For example 'name' to order by name in ascending order, and '-length' to order by number of posts in each tags in descending order order_by: name # Amount of tags to show. Will show all if not set. amount: # Whether to show tags count, i.e. number of posts in the tag. show_count: true # Table of contents widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: right type: toc # Whether to show the index of each heading index: false # Whether to collapse sub-headings when they are out-of-view collapsed: false # Maximum level of headings to show (1-6) depth: 4 调整两栏的宽度： 在 layout.jsx 中作如下修改：强制双栏显示的页面宽度为三栏的宽度，即 is-3-column。 ~\\blog\\node_modules\\hexo-theme-icarus\\layout\\layout.jsx1234 &lt;Head site={site} config={config} helper={helper} page={page} /&gt;- &lt;body class={`is-${columnCount}-column`}&gt;+ &lt;body class={`is-3-column`}&gt; &lt;Navbar config={config} helper={helper} page={page} /&gt; 然后在 layout.jsx 和 widgets.jsx 中修改 columnCount 的值，需要保证二者之和为 12。 ~\\blog\\node_modules\\hexo-theme-icarus\\layout\\layout.jsx1234 'is-12': columnCount === 1,- 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2,+ 'is-8-tablet is-8-desktop is-9-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 ~\\blog\\node_modules\\hexo-theme-icarus\\layout\\common\\widgets.jsx12345678 function getColumnSizeClass(columnCount) { switch (columnCount) { case 2:- return 'is-4-tablet is-4-desktop is-4-widescreen';+ return 'is-4-tablet is-4-desktop is-3-widescreen'; case 3: return 'is-4-tablet is-4-desktop is-3-widescreen'; } 目录粘性定位在 main.js 中添加如下一行： ~\\blog\\node_modules\\hexo-theme-icarus\\source\\js\\main.js123 if ($toc.length &gt; 0) {+ $toc.addClass('column-right is-sticky'); # 和自己的 widget 的位置对应 const $mask = $('&lt;div&gt;'); 在 widget.styl 中添加如几行： ~\\blog\\node_modules\\hexo-theme-icarus\\include\\style\\widget.styl123+#toc+ max-height: calc(100vh - 22px)+ overflow-y: scroll 所有图片居中显示在 article.styl 中添加如下四行： ~\\blog\\node_modules\\hexo-theme-icarus\\include\\style\\article.styl1234567 footer strong + cite margin-left: .5em+ a+ img+ margin: auto+ display: block Footer 高度修改新建一个自定义的 style 文件，内容如下： ~\\blog\\node_modules\\hexo-theme-icarus\\include\\style\\custom.styl123.footer background-color rgba(255,255,255,0.7) padding 1.5rem 1.5rem 1.5rem 在 style.styl 中引入： ~\\blog\\node_modules\\hexo-theme-icarus\\source\\css\\style.styl12 @import '../../include/style/responsive'+ @import '../../include/style/ZSY_custom' Icarus 主题自定义 主题说明文档-常见问题","link":"/97a0e81144b5/"},{"title":"LabVIEW 使用经验积累","text":"本文介绍了 LabVIEW 生成独立可执行程序和安装程序的方法。 LavVIEW 基础功能的实现LabVIEW 格式化字符串数据库中时间的格式为 Datetime 格式但 LabVIEW 自带的时间获取函数格式与 DateTime 格式不对应。转换方法为使用格式化日期/时间字符串. Vi 格式化字符为%Y-%m-%d%H:%M:%S%3 u 格式化后输出 2016-08-2914:28:19.080 参考 LabVIEW 实现串口通信LabVIEW 实现串口通信 DAQ 助手多通道操作DAQ 助手多通道 输出部分 字符串日期转换为时间标识字符串日期转换为时间标识 LabVIEW 的 TDMS 格式文件存储与读取 TDMS 文件格式简介 我们用 Labview 编写上位机的过程中，一般都会遇到文件存储的问题，例如接收到下位机上传的数据，这些实时数据需要保存起来，方便以后进行数据分析。大部人的第一反应是用数据库，如果数据量不大的话，是可以用 Access 数据库存储数据的，但是如果存储的数据量过大，且需要实时存储，此时用 Access 数据库的话可能会导致计算机内存占用过大进而导致计算机卡顿；但是，使用 TDMS 方式存储实时数据就不会出现这个问题。 TDMS 全称 Technical Document Management System，最早是机务工程维修中高效管理技术资料等数据的计算机管理系统。TDMS 文件是 NI 公司推出的数据管理系统，以二进制方式存储数据，文件很小，速度很快，可以很好的解决实时数据的存储问题。TDMS 文件分为文件、通道组和通道三个部分。 简单文件读/写 波形数据读/写 二维数组读/写 TDMS 可以存储二维数组或者字符串二维数组，数组的每一列作为一个通道。 TDMS 文件存储与读取 LabVIEW 程序要点现有的问题： 写文件的时候不能显示，数据线程冲突 写入的文件：每一个文件 LabVIEW 队列的使用 队列数据的传输，只能有一个入队列一个出队列，如果需要多输出的话，需要创建多个队列。 队列的写入需要放在循环里面。 队列的大小控制需要谨慎，一不小心就会出问题。 找一个别人的振动测试软件，学习一下界面的设置，美化一下自己的界面。 数据分析的结果保存到数据库，数据还是以文件的形式保存。这个需要和客户商量。 数据库操作创建数据库 create table test(time timestamp, freq float[], amp float[]); 写入数据库 insert into test(time,freq, amp) values(‘2021-7-18:13:47:45’,‘{1,2,3}’, ‘{10,8,9}’); 查询数据库 select * from test PgAdmin III PostgreSQL 清空表并保留表结构、清空数据库还原数据库为新建时的状态的方法一般情况下，我们使用 delete 删除表中数据，但是 delete 是一条数据一条数据来删除表中的数据，直至表清空（保留表结构），但是当数据量很大时，它耗时较久。 其实，删除表数据但保留表结构使用 truncate 更快速安全，使用方法为： 当表没有其他关系时 TRUNCATE TABLE tablename; 当表中有外键时，要用级联方式删所有关联的数据 TRUNCATE TABLE tablename CASCADE; 清空数据库还原数据库为新建时的状态，在 postgreSQL 中，创建数据库时会自动创建 public 模式，一般我们把表都保存在该模式中，因此直接删除该模式再重新创建该模式。若数据在其他模式中，则把 public 换为数据表所在模式即可。 删除 public 模式以及模式里面所有的对象 DROP SCHEMA public CASCADE; 创建 public 模式 CREATE SCHEMA public; LabVIEW 项目软件开发待开发功能列表 两个板卡共用一套软件 BID 拨码 报警的功能：连续几个周期出现问题，就报警 现有数据采用什么特征处理？数据的均方差 数据的最大值 振动烈度 如何进行状态监测？每隔一段时间，读取 TDMS 文件 软件分为哪些模块？数据处理模块 历史数据分析 数据回放 开发过程经验记录 如何实现数据的拼接？ LabVIEW 每通道采样数=采样率 采样率和采样数的设置 数据 $\\rightarrow$ 数据拼接 $\\rightarrow$ 数据处理 生产者、消费者模式 LabVIEW 项目软件生成我的安装程序和我的应用程序关于 LabVIEW 运行引擎任何电脑，只要你想在上面运行 LabVIEW 生成的独立可执行程序（exe），你都需要在目标电脑上安装 LabVIEW 运行引擎。LabVIEW 运行引擎包含了： 运行 LabVIEW 生成的可执行程序所需要的库和文件 使用浏览器远程访问前面板所需的浏览器插件 应用程序中生成 LabVIEW 报表所需要的一些组件 一些 3 D 图表的支持等 运行引擎本身就是支持多语言的，不需要安装特定语言版本的运行引擎。 另外需要确保目标电脑上安装的运行引擎版本与开发应用程序时使用的 LabVIEW 版本一致。 如果你想在一台电脑上运行多个版本的 LabVIEW 生成的可执行程序，那你的电脑必须安装与这些 LabVIEW 版本一一对应的多个版本的运行引擎。 不同版本的 LabVIEW 运行引擎可以在 NI 官方网站上免费下载到。 关于硬件驱动如果您的程序使用了 NI 硬件的驱动，那么在目标电脑上就需要安装对应版本的驱动程序。 以 DAQmx 为例，比方说您在实现一个数据采集任务时用到了某个版本的 DAQmx 驱动，将来在目标电脑上就需要安装对应版本的 DAQmx 驱动。 综上所述，目标电脑上安装 LabVIEW 运行引擎是必须的，而硬件驱动的安装则取决于您的程序是否有使用该硬件驱动。 准备工作生成 独立可执行程序 和 安装程序 需要用到应用程序生成器，LabVIEW 专业开发版包含有应用程序生成器，基础版和完全开发版则需要单独购买。 在生成独立可执行应用程序之前需要做一些检查工作，LabVIEW 帮助文档中列出了一个检查列表：http://zone.ni.com/reference/en-XX/help/371361J-01/lvconcepts/build_checklist/ 生成我的应用程序 新建一个 LabVIEW 项目，或者打开一个已经建好的项目，项目中包含了您的 vi，确保 vi 运行正常。一些通过文件路径来使用文件的代码在编译成 exe 之后可能会出现文件找不到的错误，对于此类错误，可以参考 KB：5SD4CE7K, 3HKEK93U, 2T6GI6BH, 18RDJ60O。新建的项目如图： 在项目浏览器的程序生成规范处右键单击新建 $\\rightarrow$应用程序（EXE） 设置目标文件名和目标目录。目标文件名是您将来生成的 exe 文件名，该文件位于目标目录中，默认的目标目录会在项目所在目录的上一级目录中新建一个 builds 文件夹，生成的 exe 文件保存到这个目录中。如图 选择源文件，选中顶层 vi 单击“添加项”箭头将顶层 vi 添加到启动 vi 栏中，其他用到的子 vi 和文件可以添加到始终包括栏中，如图 可以使用 LabVIEW 默认图标作为应用程序图标，也可以选择自己设计一个图标：使用图标编辑器编辑并保存自己设计的图标，去掉“使用默认 LabVIEW 图标文件”前的勾选，在弹出的对话框中选择添加刚才保存的图标文件，注意“图标图像”的类型要与编辑该图标时选择的类型一致，如图 选择预览 $\\rightarrow$ 生成预览，然后可以看到将来会生成哪些文件，其中就包括我们的独立可执行应用程序，现在还看不到我们自定义的图标，不用着急，最后生成以后就可以看到了，如图 最后选择“生成”，LabVIEW 就会弹出生成状态窗口，当生成结束后会提示生成的应用程序所在路径，您可以单击浏览打开应用程序所在目录，然后就可以看到带自定义图标的应用程序了，如果单击完成，则会关闭生成状态窗口，如图 至此，我们已经完成了生成独立可执行应用程序的操作，如果目标电脑上已经安装了 LabVIEW 运行引擎和其他需要的组件，那么就可以将生成的 exe 文件拷贝到目标电脑上直接运行了。 以下篇幅介绍在生成 exe 的基础上如何生成 installer，即生成安装文件的操作。 生成我的安装程序 在同一个项目中右键单击程序生成规范，选择新建 $\\rightarrow$ 安装程序，如图 在“产品信息”中设置您的产品名称和安装程序生成目录，产品名称会影响安装程序所在的路径名，并且对应着在 windows 添加删除程序列表中应用程序的名字，如图 选择“目标”，修改目标名称，该名称决定了将来安装程序运行结束后，可执行文件会释放到哪个文件夹中，如图 选择“源文件”，在项目文件视图中单击选择之前创建的应用程序生成规范，然后单击添加箭头，将应用程序添加到目标文件夹中，右边目标视图可以看到添加结果，如图 选择“快捷方式”，修改右边的快捷方式名称和子目录名称。快捷方式名称对应着将来在开始菜单中看到的快捷方式图标的名称，子目录对应着快捷方式在开始菜单中所处的文件夹名称，如图 选择“附加安装程序”，勾选相应的 LabVIEW 运行引擎和必要的驱动程序以及工具包等，之后这些驱动以及工具包会一起包含在生成的 installer 中。LabVIEW 在这里会自动帮您勾选一些必要的 NI 安装程序，但是有可能并没有包含所有需要安装的程序，您的程序中使用到了哪些驱动以及工具包，在这里配置的时候就需要勾选哪些工具包。对于一些特定的工具包，如 NI OPCServers、DSC 运行引擎等不支持直接打包部署（KB: 5SS56RMQ 56P8BSJT），因此在这里会无法勾选或者勾选无效，这些工具包需要在目标电脑上再单独安装，如果您不能确定该工具包是否支持打包部署，请联系 NI 技术支持。 单击“生成”按钮开始生成安装程序，同样会弹出一个生成状态窗口，生成过程完成后，单击浏览可以打开安装文件所在路径，您会看到一个 setup. Exe 文件，这个文件就是最终的安装文件。单击“完成”按钮关闭状态窗口。如图 现在，您可以将打包生成好的安装程序拷贝到目标电脑上运行了，需要注意的是，拷贝的时候要将整个文件夹拷贝到目标电脑上然后再运行 setup. Exe，安装过程与普通 windows 应用程序没有区别，安装结束后您就可以在目标电脑上运行您自己的应用程序了。 使用 LabVIEW 如何生成应用程序（exe）和安装程序（installer） 项目软件 DAQ 数据采集程序安装指南安装 解压文件夹； 进入 我的安装程序/Volume/setup. Exe，双击安装。 数据采集 进入 我的应用程序/Volume/数据采集与存储. Exe 双击打开，界面如下： 选中所使用的通道： 选中 数据采集 选项卡； 更改左侧采样率，点击 开始 按钮，即可观测数据是否输入； 按照需要，更改右侧采集文件参数设置，点击 开始 按钮，即开始文件存储。 采集的文件以 TDMS 形式存放于 我的应用程序/Volume/数据采集与存储. Exe 同文件夹下： 注意事项如果遇到设置错误，需要关闭软件，重新打开进行设置。","link":"/2cd9827f1981/"},{"title":"基于 GitHub 或 Gitee 创建图床","text":"本文介绍了基于 GitHub 或 Gitee 创建图床的过程。 Gitee 图床创建过程创建仓库新建仓库时的配置如图所示： 生成私人令牌进入设置里面，创建私人令牌： 下载安装 PicGoReleases · Molunerfinn/PicGo (github.com) 下载安装插件 gitee-uploader 配置插件按照图示配置插件： 上传图片，获得自动复制的链接，即可正常使用，需要注意的是超过 1 M 的图片无法通过外链读取。 GitHub 图床创建过程创建 Repo 并生成 TokenGitHub 生成的对于特定 Repo 有效的 Token 有时限，需要过期后再次设置。 安装 PicGo 并进行图床设置 上传图片，获得自动复制的链接，即可正常使用。","link":"/1fdd1c124c18/"},{"title":"MATLAB 使用经验积累","text":"本文介绍了 MATLAB 的使用经验，包括软件设置、软件功能等。 Documentation - MATLAB &amp; Simulink (mathworks.com) MATLAB 软件设置更换默认字体 下载安装字体 YaHei Consolas Hybrid 字体（英文字体：Consolas，最好的 coding；中文字体：YaHei） 重启 MATLAB，主页-&gt;预设-&gt;字体，选择 YaHei Consolas Hybrid，如图 修改起始文件夹与语言 123% 修改起始文件夹edit matlabrc.madd &quot;cd 'your start path'&quot; 软件功能读取文件夹下所有文件 使用dir函数： 123dir('.') % 列出当前目录下所有子文件夹和文件dir('G:\\Matlab') % 列出指定目录下所有子文件夹和文件dir('*.m') % 列出当前目录下符合正则表达式的文件夹和文件 代码示例： 12345678910111213namelist = dir('F:\\File\\*.txt');% 读取后 namelist 的格式为% name -- filename% date -- modification date% bytes -- number of bytes allocated to the file% isdir -- 1 if name is a directory and 0 if notlen = length(namelist);for i = 1:lenfile_name{i}=namelist(i).name;x= load(file_name{i});end 批量保存 .mat 文件 使用 save命令，可以批量保存文件。 例如，已知矩阵 A，将 A 矩阵的每一列进行拆分，分别保存在 1-points.mat, 2-points.mat, 3-points.mat 中，代码如下： 1234567A=[0.7329 -0.0000 19.2805;-0.0000 0.7329 25.0947]for i=1:3 chr=[num2str(i),'-points.mat'] b=A(:,i) save(chr,'b')end 遍历结构体成员12345678910data.name1 = 1;data.name2 = 2;data.name1 % 方式一data.name2field = fieldnames(data); % cellfor i = 1:length(field) name_i = field{i}; % 这里需要注意，用的是{}，不是() value_i = getfield(data, name_i) % 方式二 value_i = data.(name_i) % 方式三end matlab 遍历结构体 struc 的成员 - 那抹阳光 1994 - 博客园 (cnblogs.com) 使用函数作为参数使用函数作为参数","link":"/a219875a2168/"}],"tags":[{"name":"MachineLearning","slug":"MachineLearning","link":"/tags/MachineLearning/"},{"name":"DeepLearning","slug":"DeepLearning","link":"/tags/DeepLearning/"},{"name":"Alist","slug":"Alist","link":"/tags/Alist/"},{"name":"RaiDrive","slug":"RaiDrive","link":"/tags/RaiDrive/"},{"name":"PowerShell","slug":"PowerShell","link":"/tags/PowerShell/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"LabVIEW","slug":"LabVIEW","link":"/tags/LabVIEW/"},{"name":"Gitee","slug":"Gitee","link":"/tags/Gitee/"},{"name":"PicGo","slug":"PicGo","link":"/tags/PicGo/"},{"name":"MATLAB","slug":"MATLAB","link":"/tags/MATLAB/"}],"categories":[{"name":"知识学习-深度学习","slug":"知识学习-深度学习","link":"/categories/%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"经验积累-软件使用","slug":"经验积累-软件使用","link":"/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF-%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"},{"name":"经验积累-个人博客","slug":"经验积累-个人博客","link":"/categories/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"pages":[{"title":"学术索引","text":"Academic Search Engines arXiv Google Scholar ResearchGate Sci-Hub 国家自然科学基金大数据知识管理服务门户 Publisher Search Engine AAAS Science ACM ACM Digital Library ASME ASME Digital Collection Elsevier Elsevier ScienceDirect IEEE IEEE Xplore National Academy of Sciences PNAS Oxford University Press Oxford Academic Springer Nature Nature Search Springer Nature SpringerLink Springer Nature Springer Nature Showcase Taylor &amp; Francis Taylor &amp; Francis Online Wiley Wiley Online Library Elsevier Journals Journal Impact Factor Artificial Intelligence 14.4 Automatica 6.4 Computer Methods in Applied Mechanics and Engineering 7.2 Computers &amp; Structures 4.7 Computers in Industry 10 ISA Transactions 7.3 Journal of Computational and Applied Mathematics 2.4 Journal of Computational Physics 4.1 Journal of Sound and Vibration 4.7 Mechanical Systems and Signal Processing 8.4 Measurement 5.6 IEEE Journals Journal Impact Factor IEEE Sensors Journal 4.3 IEEE Transactions on Automatic Control 6.8 IEEE Transactions on Industrial Electronics 7.7 IEEE Transactions on Industrial Informatics 12.3 IEEE Transactions on Instrumentation and Measurement 5.6 IEEE Transactions on Neural Networks and Learning Systems 10.4 IEEE Transactions on Pattern Analysis and Machine Intelligence 23.6 其他期刊 Publisher Journal Impact Factor AAAS Science Advances 13.6 Nature Communications Physics 5.5 Nature Nature Communications 16.6 Nature Nature Machine Intelligence 23.8 Springer International Journal of Computer Vision (IJCV) 19.5 Wiley Advanced Science 15.1 期刊缩写查询 CAS Source Index (CASSI) Search Tool Web of Science Help (webofknowledge.com) Science and Engineering Journal Abbreviations | Woodward Library (ubc.ca) Journal Abbreviation Database (library.illinois.edu) 国际会议 Publisher Conference Neural Information Processing Systems Foundation Neural Information Processing Systems (NeurIPS) International Machine Learning Society International Conference on Machine Learning (ICML) ICLR Foundation International Conference on Learning Representations (ICLR) IEEE International Conference on Computer Vision (ICCV) 学者与论文合集 astro automata Prof. Ing. Jiří Tůma, CSc. (vsb.cz) Stephen P. Boyd (stanford.edu) Lennart Ljung, Linköping University (liu.se) Maziar Raissi Bayesian Deep Learning Workshop | NeurIPS 2021 labml.ai Annotated PyTorch Paper Implementations Mechanical Systems and Signal Processing | Physics-Informed Machine Learning Enabling Fault Feature Extraction and Robust Failure Prognosis | ScienceDirect.com by Elsevier 数据集 Nonlinear Benchmark Nonlinear Benchmark (google.com) Nonlinear Benchmark - Bouc-Wen (google.com) Two-story frame with Bouc-Wen hysteretic links as a multi-degree of freedom nonlinear response simulator | Zenodo Bearing Data Center | Case School of Engineering | Case Western Reserve University","link":"/academic-index/index.html"},{"title":"在线资源","text":"在线书籍 Online Books Description Deep Learning (deeplearningbook.org) Deep Learning Book Dive into Deep Learning — Dive into Deep Learning 1.0.0-beta0 documentation (d2l.ai) Dive into Deep Learning Neural networks and deep learning Neural networks and deep learning Introduction to Probability for Data Science (probability4datascience.com) Introduction to Probability for Data Science 简单粗暴 TensorFlow 2 简单粗暴 TensorFlow 2 神经网络与深度学习 (nndl.github.io) 神经网络与深度学习 动手学深度学习 动手学深度学习 在线课程 Online Courses Description ECE 595 / STAT 598: Machine Learning Purdue - Machine Learning CS230 Deep Learning (stanford.edu) Stanford - Deep Learning CSC321 Neural Networks and Machine Learning) Toronto - Neural Networks and Machine Learning Unsupervised Feature Learning and Deep Learning Tutorial Stanford - Unsupervised Feature Learning and Deep Learning Tutorial Analysis and Design of Feedback Control Systems MIT Analysis and Design of Feedback Control Systems ME 564 - Mechanical Engineering Analysis (washington.edu) Washington - Meachanical Engineering Analysis Math 207A, Fall 2014 (ucdavis.edu) Applied Mathematics Vibrationdata Matlab Page Vibration data Matlab Linear Algebra M408M Learning Modules (utexas.edu) Multivariable Calculus DEEP LEARNING · Deep Learning (atcold.github.io) Deep Learning with PyTorch 深度学习教程中文版 Deep learning tutorial in Chinese/深度学习教程中文版 CS 自学指南 CS 自学指南 AI 算法工程时手册 AI 算法工程师手册 在线学习社区 Online Learning Community Description Machine Learning Tutorial (geeksforgeeks.org) Machine Learning Tutorial Deep Learning Tutorial - GeeksforGeeks Deep Learning Tutorial Deep Learning - NVIDIA Developer Deep Learning GeeksforGeeks GeeksforGeeks freeCodeCamp Free Code Camp LeetCode LeetCode - The World’s Leading Online Programming Learning Platform 资源网站 Website Website 易搜-网盘资源搜索 黑洞导航 Alist-七米蓝 Alist-微资源 熊猫无损音乐 KK 小站-夸克网盘资源 网盘小站-阿里云盘资源","link":"/online-resources/index.html"},{"title":"project-codes","text":"官方项目 项目 GitHub 地址 项目文档 项目说明 Google JAX JAX Docs JAX 深度学习框架 Google TensorFlow TensorFlow Docs TensorFlow 深度学习框架 Keras Keras Docs Keras 深度学习框架 MS .NET MS .NET Docs Microsoft 的 .NET j 框架 MS C# MS C# Docs Microsoft 的 C# 语言 MS PowerShell MS PowerShell Docs Microsoft 的 PowerShell MS PowerToys MS PowerToys Docs Microsoft 的 PowerToys 工具 MS Terminal MS Windows Terminal Docs Microsoft 的 Terminal 终端 MS VS Code MS Visual Studio Code Docs Microsoft 的 VS Code 编辑器 MS WSL MS WSL Docs Microsoft 的 WSL 子系统 MS winget MS winget Docs Microsoft 的 winget 包管理器 PyTorch PyTorch Docs PyTorch 深度学习框架 Scikit-learn Scikit-learn Docs Scikit-learn 机器学习框架 Git Docs MS Docs Center MS GitHub Docs MS Visual Studio Docs MS Visual Studio IDE Docs 其他项目 项目说明 项目 GitHub 地址 项目文档 符号回归 trevorstephens/gplearn Genetic Programming in Python 符号回归 MilesCranmer/PySR Symbolic Regression in Python and Julia 符号回归 Ambrosys/glyph symbolic regression 稀疏回归 yngvem/group-lasso Efficient Group Lasso in Python 稀疏回归 dynamicslab/pysindy Sparse identification of nonlinear dynamical systems 系统辨识 wilsonrljr/sysidentpy System Identification Using NARMAX Models 系统辨识 jxx123/fireTS Multi-variate time series prediction library 编程语言List of programming languages TIOBE Index 编程语言 官方文档 C# C++ MS Cpp Docs CSS HTML Markdown Java JAVA Docs JavaScript JavaScript Docs LaTex LaTeX Docs Matlab Matlab Docs Python Python Docs Rust Rust Docs TypeScript 论文源码 分类 代码 论文链接 深度学习框架 备注 PINN GitHub - isds-neu/EQDiscovery Physics-informed learning of governing equations from scarce data - Nature Comunications dysco.imtlucca.it/masti/autoencoders/ Learning nonlinear state–space models using autoencoders - ScienceDirect GitHub - forgi86/dynonet [2006.02250] dynoNet: a neural network architecture for learning dynamical systems (arxiv. Org) GitHub - peterparity/symder Discovering sparse interpretable dynamics from partial observations Haiku GitHub - nips2021anonymous/MathONet Bayesian Learning to Discover Mathematical Operations in Governing Equations of Dynamic Systems Pytorch GitHub - peterparity/symder Discovering sparse interpretable dynamics from partial observations - Communications Physics (nature.com) GitHub - isds-neu/PiSL PiSL: Physics-informed Spline Learning for data-driven identification of nonlinear dynamical systems - ScienceDirect GitHub - mrxiliang/sstsc Semi-supervised Time Series Classification Model with Self-supervised Learning - ScienceDirect GitHub - samuelkim314/DeepSymReg, GitHub - SiddeshSambasivam/Deep-symbolic-regression Integration of Neural Network-Based Symbolic Regression in Deep Learning for Scientific Discovery Pytorch Github - Debanjan-Rana/ML_in_NLD Machine Learning in Nonlinear Dynamical Systems TensorFlow 提供了神经网络和 SINDy 方法的比较","link":"/project-codes/index.html"}]}